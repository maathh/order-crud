services:
  order-eventhandler:
    image: matehusu/order-eventhandler
    ports:
      - "8080:8080"
    environment:
      DB_HOST: ${DB_HOST}
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_PORT: ${DB_PORT}
      BROKER_HOST: ${BROKER_HOST}
      BROKER_PORT: ${BROKER_PORT}
      TESTCONTAINERS_RYUK_DISABLED: "true"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - db
      - broker
    networks:
      - kafka-network

  order-crud:
    image: matehusu/order-crud
    ports:
      - "8090:8080"
    restart: unless-stopped
    environment:
      DB_HOST: ${DB_HOST}
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_PORT: ${DB_PORT}
      BROKER_HOST: ${BROKER_HOST}
      BROKER_PORT: ${BROKER_PORT}
      DD_API_KEY: ${DD_API_KEY}
      DD_APLICATION_KEY: ${DD_APLICATION_KEY}
      DD_AGENT_HOST: dd-agent
      DD_HOST: datadog
      SPRING_PROFILES_ACTIVE: dev
      JAVA_OPTS: -Dspring.devtools.restart.enabled=true -Dspring.devtools.livereload.enabled=true
    volumes:
      - ./spring-boot-service/src:/app/src
      - ./spring-boot-service/pom.xml:/app/pom.xml
    depends_on:
      - db
      - broker
    networks:
      - kafka-network

  db:
    container_name: db
    image: postgres:latest
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - ./data:/var/lib/postgresql/data
    networks:
      - kafka-network

  datadog:
    container_name: dd-agent
    image: datadog/agent:latest
    links:
      - broker
      - order-crud
      - order-eventhandler
    environment:
      - DD_API_KEY=${DD_API_KEY}
      - DD_SITE=${DD_SITE}
      - DD_APM_ENABLED=true
      - DD_APM_NON_LOCAL_TRAFFIC=true
      - DD_AGENT_HOST=dd-agent
      - DD_APM_ENABLED=true
      - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup:/host/sys/fs/cgroup:ro
    ports:
      - "8125:8125/udp"
      - "443:443"
    networks:
      - kafka-network
  zookeeper:
    hostname: zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    networks:
      - kafka-network

  broker:
    hostname: broker
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_HOST://broker:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kafka-network
networks:
  kafka-network:
    name: kafkanetwork
